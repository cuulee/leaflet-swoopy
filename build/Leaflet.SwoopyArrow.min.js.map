{"version":3,"file":"Leaflet.SwoopyArrow.min.js","sources":["../node_modules/@webk1d/leaflet-curve/leaflet.curve.js","../node_modules/@turf/helpers/index.js","../node_modules/@turf/meta/index.js","../node_modules/@turf/bbox/index.js","../node_modules/@turf/center/index.js","../src/index.js"],"sourcesContent":["/*\r\n * Leaflet.curve v0.1.0 - a plugin for Leaflet mapping library. https://github.com/elfalem/Leaflet.curve\r\n * (c) elfalem 2015\r\n */\r\n/*\r\n * note that SVG (x, y) corresponds to (long, lat)\r\n */\r\n\r\nL.Curve = L.Path.extend({\r\n\toptions: {\r\n\t},\r\n\t\r\n\tinitialize: function(path, options){\r\n\t\tL.setOptions(this, options);\r\n\t\tthis._initialUpdate = true;\r\n\t\tthis._setPath(path);\r\n\t},\r\n\t\r\n\tgetPath: function(){\r\n\t\treturn this._coords;\r\n\t},\r\n\t\r\n\tsetPath: function(path){\r\n\t\tthis._setPath(path);\r\n\t\treturn this.redraw();\r\n\t},\r\n\t\r\n\tgetBounds: function() {\r\n\t\treturn this._bounds;\r\n\t},\r\n\r\n\t_setPath: function(path){\r\n\t\tthis._coords = path;\r\n\t\tthis._bounds = this._computeBounds();\r\n\t},\r\n\t\r\n\t_computeBounds: function(){\r\n\t\tvar bound = new L.LatLngBounds();\r\n\t\tvar lastPoint;\r\n\t\tvar lastCommand;\r\n\t\tvar coord;\r\n\t\tfor(var i = 0; i < this._coords.length; i++){\r\n\t\t\tcoord = this._coords[i];\r\n\t\t\tif(typeof coord == 'string' || coord instanceof String){\r\n\t\t\t\tlastCommand = coord;\r\n\t\t\t}else if(lastCommand == 'H'){\r\n\t\t\t\tbound.extend([lastPoint.lat,coord[0]]);\r\n\t\t\t\tlastPoint = new L.latLng(lastPoint.lat,coord[0]);\r\n\t\t\t}else if(lastCommand == 'V'){\r\n\t\t\t\tbound.extend([coord[0], lastPoint.lng]);\r\n\t\t\t\tlastPoint = new L.latLng(coord[0], lastPoint.lng);\r\n\t\t\t}else if(lastCommand == 'C'){\r\n\t\t\t\tvar controlPoint1 = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar controlPoint2 = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tbound.extend(controlPoint1);\r\n\t\t\t\tbound.extend(controlPoint2);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint1 = controlPoint1;\r\n\t\t\t\tendPoint.controlPoint2 = controlPoint2;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else if(lastCommand == 'S'){\r\n\t\t\t\tvar controlPoint2 = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tvar controlPoint1 = lastPoint;\r\n\t\t\t\tif(lastPoint.controlPoint2){\r\n\t\t\t\t\tvar diffLat = lastPoint.lat - lastPoint.controlPoint2.lat;\r\n\t\t\t\t\tvar diffLng = lastPoint.lng - lastPoint.controlPoint2.lng;\r\n\t\t\t\t\tcontrolPoint1 = new L.latLng(lastPoint.lat + diffLat, lastPoint.lng + diffLng);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbound.extend(controlPoint1);\r\n\t\t\t\tbound.extend(controlPoint2);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint1 = controlPoint1;\r\n\t\t\t\tendPoint.controlPoint2 = controlPoint2;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else if(lastCommand == 'Q'){\r\n\t\t\t\tvar controlPoint = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tbound.extend(controlPoint);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint = controlPoint;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else if(lastCommand == 'T'){\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tvar controlPoint = lastPoint;\r\n\t\t\t\tif(lastPoint.controlPoint){\r\n\t\t\t\t\tvar diffLat = lastPoint.lat - lastPoint.controlPoint.lat;\r\n\t\t\t\t\tvar diffLng = lastPoint.lng - lastPoint.controlPoint.lng;\r\n\t\t\t\t\tcontrolPoint = new L.latLng(lastPoint.lat + diffLat, lastPoint.lng + diffLng);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbound.extend(controlPoint);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint = controlPoint;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else{\r\n\t\t\t\tbound.extend(coord);\r\n\t\t\t\tlastPoint = new L.latLng(coord[0], coord[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bound;\r\n\t},\r\n\t\r\n\t//TODO: use a centroid algorithm instead\r\n\tgetCenter: function () {\r\n\t\treturn this._bounds.getCenter();\r\n\t},\r\n\t\r\n\t_update: function(){\r\n\t\tif (!this._map) { return; }\r\n\t\t\r\n\t\tthis._updatePath();\r\n\t},\r\n\t\r\n\t_updatePath: function() {\r\n\t\tthis._renderer._updatecurve(this);\r\n\t},\r\n\r\n\t_project: function() {\r\n\t\tvar coord, lastCoord, curCommand, curPoint;\r\n\r\n\t\tthis._points = [];\r\n\t\t\r\n\t\tfor(var i = 0; i < this._coords.length; i++){\r\n\t\t\tcoord = this._coords[i];\r\n\t\t\tif(typeof coord == 'string' || coord instanceof String){\r\n\t\t\t\tthis._points.push(coord);\r\n\t\t\t\tcurCommand = coord;\r\n\t\t\t}else {\r\n\t\t\t\tswitch(coord.length){\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tcurPoint = this._map.latLngToLayerPoint(coord);\r\n\t\t\t\t\t\tlastCoord = coord;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif(curCommand == 'H'){\r\n\t\t\t\t\t\t\tcurPoint = this._map.latLngToLayerPoint([lastCoord[0], coord[0]]);\r\n\t\t\t\t\t\t\tlastCoord = [lastCoord[0], coord[0]];\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tcurPoint = this._map.latLngToLayerPoint([coord[0], lastCoord[1]]);\r\n\t\t\t\t\t\t\tlastCoord = [coord[0], lastCoord[1]];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis._points.push(curPoint);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n});\r\n\r\nL.curve = function (path, options){\r\n\treturn new L.Curve(path, options);\r\n};\r\n\r\nL.SVG.include({\r\n\t_updatecurve: function(layer){\r\n\t\tthis._setPath(layer, this._curvePointsToPath(layer._points));\r\n\r\n\t\tif(layer.options.animate){\r\n\t\t\tvar path = layer._path;\r\n\t\t\tvar length = path.getTotalLength();\r\n\t\t\t\r\n\t\t\tif(!layer.options.dashArray){\r\n\t\t\t\tpath.style.strokeDasharray = length + ' ' + length;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(layer._initialUpdate){\r\n\t\t\t\tpath.animate([\r\n\t\t\t\t\t\t{strokeDashoffset: length},\r\n\t\t\t\t\t\t{strokeDashoffset: 0}\r\n\t\t\t\t\t], layer.options.animate);\r\n\t\t\t\tlayer._initialUpdate = false;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t\r\n \t_curvePointsToPath: function(points){\r\n\t\tvar point, curCommand, str = '';\r\n\t\tfor(var i = 0; i < points.length; i++){\r\n\t\t\tpoint = points[i];\r\n\t\t\tif(typeof point == 'string' || point instanceof String){\r\n\t\t\t\tcurCommand = point;\r\n\t\t\t\tstr += curCommand;\r\n\t\t\t}else{\r\n\t\t\t\tswitch(curCommand){\r\n\t\t\t\t\tcase 'H':\r\n\t\t\t\t\t\tstr += point.x + ' ';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'V':\r\n\t\t\t\t\t\tstr += point.y + ' ';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr += point.x + ',' + point.y + ' ';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str || 'M0 0';\r\n\t}\r\n});\r\n","/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties, bbox, id) {\n    if (geometry === undefined) throw new Error('geometry is required');\n    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n\n    var feat = {\n        type: 'Feature',\n        properties: properties || {},\n        geometry: geometry\n    };\n    if (bbox) {\n        if (bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n        feat.bbox = bbox;\n    }\n    if (id) feat.id = id;\n    return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<number>} coordinates Coordinates\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = 'Point';\n * var coordinates = [110, 50];\n *\n * var geometry = turf.geometry(type, coordinates);\n *\n * //=geometry\n */\nfunction geometry(type, coordinates, bbox) {\n    // Validation\n    if (!type) throw new Error('type is required');\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    var geom;\n    switch (type) {\n    case 'Point': geom = point(coordinates).geometry; break;\n    case 'LineString': geom = lineString(coordinates).geometry; break;\n    case 'Polygon': geom = polygon(coordinates).geometry; break;\n    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;\n    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;\n    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;\n    default: throw new Error(type + ' is invalid');\n    }\n    if (bbox) {\n        if (bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n        geom.bbox = bbox;\n    }\n    return geom;\n}\n\n/**\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n    if (coordinates.length === undefined) throw new Error('Coordinates must be an array');\n    if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\n    if (typeof coordinates[0] !== 'number' || typeof coordinates[1] !== 'number') throw new Error('Coordinates must contain numbers');\n\n    return feature({\n        type: 'Point',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<Polygon>} a Polygon feature\n * @throws {Error} throw an error if a LinearRing of the polygon has too few positions\n * or if a LinearRing of the Polygon does not have matching Positions at the beginning & end.\n * @example\n * var polygon = turf.polygon([[\n *   [-2.275543, 53.464547],\n *   [-2.275543, 53.489271],\n *   [-2.215118, 53.489271],\n *   [-2.215118, 53.464547],\n *   [-2.275543, 53.464547]\n * ]], { name: 'poly1', population: 400});\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    for (var i = 0; i < coordinates.length; i++) {\n        var ring = coordinates[i];\n        if (ring.length < 4) {\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error('First and last Position are not equivalent.');\n            }\n        }\n    }\n\n    return feature({\n        type: 'Polygon',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link LineString} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<LineString>} a LineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var linestring1 = turf.lineString([\n *   [-21.964416, 64.148203],\n *   [-21.956176, 64.141316],\n *   [-21.93901, 64.135924],\n *   [-21.927337, 64.136673]\n * ]);\n * var linestring2 = turf.lineString([\n *   [-21.929054, 64.127985],\n *   [-21.912918, 64.134726],\n *   [-21.916007, 64.141016],\n *   [-21.930084, 64.14446]\n * ], {name: 'line 1', distance: 145});\n *\n * //=linestring1\n *\n * //=linestring2\n */\nfunction lineString(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n    if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');\n\n    return feature({\n        type: 'LineString',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @returns {FeatureCollection} a FeatureCollection of input features\n * @example\n * var features = [\n *  turf.point([-75.343, 39.984], {name: 'Location A'}),\n *  turf.point([-75.833, 39.284], {name: 'Location B'}),\n *  turf.point([-75.534, 39.123], {name: 'Location C'})\n * ];\n *\n * var collection = turf.featureCollection(features);\n *\n * //=collection\n */\nfunction featureCollection(features, bbox) {\n    if (!features) throw new Error('No features passed');\n    if (!Array.isArray(features)) throw new Error('features must be an Array');\n\n    var fc = {\n        type: 'FeatureCollection',\n        features: features\n    };\n    if (bbox) fc.bbox = bbox;\n    return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    return feature({\n        type: 'MultiLineString',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    return feature({\n        type: 'MultiPoint',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    return feature({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometryCollection([pt, line]);\n *\n * //=collection\n */\nfunction geometryCollection(geometries, properties, bbox, id) {\n    if (!geometries) throw new Error('geometries is required');\n    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n\n    return feature({\n        type: 'GeometryCollection',\n        geometries: geometries\n    }, properties, bbox, id);\n}\n\n// https://en.wikipedia.org/wiki/Great-circle_distance#Radius_for_spherical_Earth\nvar factors = {\n    miles: 3960,\n    nauticalmiles: 3441.145,\n    degrees: 57.2957795,\n    radians: 1,\n    inches: 250905600,\n    yards: 6969600,\n    meters: 6373000,\n    metres: 6373000,\n    centimeters: 6.373e+8,\n    centimetres: 6.373e+8,\n    kilometers: 6373,\n    kilometres: 6373,\n    feet: 20908792.65\n};\n\nvar areaFactors = {\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    centimetres: 10000,\n    millimeter: 1000000,\n    acres: 0.000247105,\n    miles: 3.86e-7,\n    yards: 1.195990046,\n    feet: 10.763910417,\n    inches: 1550.003100006\n};\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToDistance\n * @param {number} radians in radians across the sphere\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToDistance(radians, units) {\n    if (radians === undefined || radians === null) throw new Error('radians is required');\n\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error('units is invalid');\n    return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name distanceToRadians\n * @param {number} distance in real units\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction distanceToRadians(distance, units) {\n    if (distance === undefined || distance === null) throw new Error('distance is required');\n\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error('units is invalid');\n    return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name distanceToDegrees\n * @param {number} distance in real units\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction distanceToDegrees(distance, units) {\n    return radians2degrees(distanceToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAngle\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAngle(bearing) {\n    if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n\n    var angle = bearing % 360;\n    if (angle < 0) angle += 360;\n    return angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radians2degrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radians2degrees(radians) {\n    if (radians === null || radians === undefined) throw new Error('radians is required');\n\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degrees2radians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degrees2radians(degrees) {\n    if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\n\n\n/**\n * Converts a distance to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} distance to be converted\n * @param {string} originalUnit of the distance\n * @param {string} [finalUnit=kilometers] returned unit\n * @returns {number} the converted distance\n */\nfunction convertDistance(distance, originalUnit, finalUnit) {\n    if (distance === null || distance === undefined) throw new Error('distance is required');\n    if (!(distance >= 0)) throw new Error('distance must be a positive number');\n\n    var convertedDistance = radiansToDistance(distanceToRadians(distance, originalUnit), finalUnit || 'kilometers');\n    return convertedDistance;\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeter, acre, mile, yard, foot, inch\n * @param {number} area to be converted\n * @param {string} [originalUnit=meters] of the distance\n * @param {string} [finalUnit=kilometers] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (area === null || area === undefined) throw new Error('area is required');\n    if (!(area >= 0)) throw new Error('area must be a positive number');\n\n    var startFactor = areaFactors[originalUnit || 'meters'];\n    if (!startFactor) throw new Error('invalid original units');\n\n    var finalFactor = areaFactors[finalUnit || 'kilometers'];\n    if (!finalFactor) throw new Error('invalid final units');\n\n    return (area / startFactor) * finalFactor;\n}\n\nmodule.exports = {\n    feature: feature,\n    geometry: geometry,\n    featureCollection: featureCollection,\n    geometryCollection: geometryCollection,\n    point: point,\n    multiPoint: multiPoint,\n    lineString: lineString,\n    multiLineString: multiLineString,\n    polygon: polygon,\n    multiPolygon: multiPolygon,\n    radiansToDistance: radiansToDistance,\n    distanceToRadians: distanceToRadians,\n    distanceToDegrees: distanceToDegrees,\n    radians2degrees: radians2degrees,\n    degrees2radians: degrees2radians,\n    bearingToAngle: bearingToAngle,\n    convertDistance: convertDistance,\n    convertArea: convertArea,\n    round: round\n};\n","/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0.\n * @param {number} featureIndex The current index of the feature being processed.\n * @param {number} featureSubIndex The current subIndex of the feature being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, featureSubIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=featureSubIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var featureIndex, geometryIndex, j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (featureIndex = 0; featureIndex < stop; featureIndex++) {\n        var featureSubIndex = 0;\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n        (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (geometryIndex = 0; geometryIndex < stopG; geometryIndex++) {\n            geometry = isGeometryCollection ?\n            geometryMaybeCollection.geometries[geometryIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                callback(coords, coordIndex, featureIndex, featureSubIndex);\n                coordIndex++;\n                featureSubIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    callback(coords[j], coordIndex, featureIndex, featureSubIndex);\n                    coordIndex++;\n                    featureSubIndex++;\n                }\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++)\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        callback(coords[j][k], coordIndex, featureIndex, featureSubIndex);\n                        coordIndex++;\n                        featureSubIndex++;\n                    }\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++)\n                    for (k = 0; k < coords[j].length; k++)\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            callback(coords[j][k][l], coordIndex, featureIndex, featureSubIndex);\n                            coordIndex++;\n                            featureSubIndex++;\n                        }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    coordEach(geometry.geometries[j], callback, excludeWrapCoord);\n                break;\n            default: throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the feature being processed.\n * @param {number} featureSubIndex The current subIndex of the feature being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=featureSubIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current properties being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            callback(geojson.features[i].properties, i);\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current properties being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current feature being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            callback(geojson.features[i], i);\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current geometry being processed.\n * @param {number} currentIndex The index of the current element being processed in the\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} currentProperties The current feature properties being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, currentProperties)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, currentProperties) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=currentProperties\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        geometryProperties,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n        (isFeature ? geojson.geometry : geojson));\n        geometryProperties = (isFeatureCollection ? geojson.features[i].properties :\n                              (isFeature ? geojson.properties : {}));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n            geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                callback(null, featureIndex, geometryProperties);\n                featureIndex++;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                callback(geometry, featureIndex, geometryProperties);\n                featureIndex++;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    callback(geometry.geometries[j], featureIndex, geometryProperties);\n                    featureIndex++;\n                }\n                break;\n            }\n            default: throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Feature being processed.\n * @param {number} currentIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {Object} currentProperties The current feature properties being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, currentProperties)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, currentProperties) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=currentProperties\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, currentIndex, currentProperties) {\n        if (currentIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, currentIndex, currentProperties);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureSubIndex The subindex of the current element being processed in the\n * array. Starts at index 0 and increases if the flattened feature was a multi-geometry.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, featureSubIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, featureSubIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=featureSubIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            callback(feature(geometry, properties), featureIndex, 0);\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        geometry.coordinates.forEach(function (coordinate, featureSubIndex) {\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            callback(feature(geom, properties), featureIndex, featureSubIndex);\n        });\n\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureSubIndex The subindex of the current element being processed in the\n * array. Starts at index 0 and increases if the flattened feature was a multi-geometry.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, featureSubIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, featureSubIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=featureSubIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, featureSubIndex) {\n        if (featureIndex === 0 && featureSubIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, featureSubIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current segment being processed.\n * @param {number} featureIndex The index of the current element being processed in the array, starts at index 0.\n * @param {number} featureSubIndex The subindex of the current element being processed in the\n * array. Starts at index 0 and increases for each iterating line segment.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, featureSubIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, featureSubIndex) {\n *   //= currentSegment\n *   //= featureIndex\n *   //= featureSubIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * var initialValue = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * }, initialValue);\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature, featureIndex) {\n        var featureSubIndex = 0;\n        // Exclude null Geometries\n        if (!feature.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        coordReduce(feature, function (previousCoords, currentCoord) {\n            var currentSegment = lineString([previousCoords, currentCoord], feature.properties);\n            callback(currentSegment, featureIndex, featureSubIndex);\n            featureSubIndex++;\n            return currentCoord;\n        });\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} [previousValue] The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} [currentSegment] The current segment being processed.\n * @param {number} [currentIndex] The index of the current element being processed in the\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} [currentSubIndex] The subindex of the current element being processed in the\n * array. Starts at index 0 and increases for each iterating line segment.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, currentIndex, currentSubIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= currentIndex\n *   //= currentSubIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    segmentEach(geojson, function (currentSegment, currentIndex, currentSubIndex) {\n        if (currentIndex === 0 && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, currentIndex, currentSubIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Create Feature\n *\n * @private\n * @param {Geometry} geometry GeoJSON Geometry\n * @param {Object} properties Properties\n * @returns {Feature} GeoJSON Feature\n */\nfunction feature(geometry, properties) {\n    if (geometry === undefined) throw new Error('No geometry passed');\n\n    return {\n        type: 'Feature',\n        properties: properties || {},\n        geometry: geometry\n    };\n}\n\n/**\n * Create LineString\n *\n * @private\n * @param {Array<Array<number>>} coordinates Line Coordinates\n * @param {Object} properties Properties\n * @returns {Feature<LineString>} GeoJSON LineString Feature\n */\nfunction lineString(coordinates, properties) {\n    if (!coordinates) throw new Error('No coordinates passed');\n    if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');\n\n    return {\n        type: 'Feature',\n        properties: properties || {},\n        geometry: {\n            type: 'LineString',\n            coordinates: coordinates\n        }\n    };\n}\n\nmodule.exports = {\n    coordEach: coordEach,\n    coordReduce: coordReduce,\n    propEach: propEach,\n    propReduce: propReduce,\n    featureEach: featureEach,\n    featureReduce: featureReduce,\n    coordAll: coordAll,\n    geomEach: geomEach,\n    geomReduce: geomReduce,\n    flattenEach: flattenEach,\n    flattenReduce: flattenReduce,\n    segmentEach: segmentEach,\n    segmentReduce: segmentReduce\n};\n","var coordEach = require('@turf/meta').coordEach;\n\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {FeatureCollection|Feature<any>} geojson input features\n * @returns {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nmodule.exports = function (geojson) {\n    var bbox = [Infinity, Infinity, -Infinity, -Infinity];\n    coordEach(geojson, function (coord) {\n        if (bbox[0] > coord[0]) bbox[0] = coord[0];\n        if (bbox[1] > coord[1]) bbox[1] = coord[1];\n        if (bbox[2] < coord[0]) bbox[2] = coord[0];\n        if (bbox[3] < coord[1]) bbox[3] = coord[1];\n    });\n    return bbox;\n};\n","var bbox = require('@turf/bbox');\nvar point = require('@turf/helpers').point;\n\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the absolute center point of all features.\n *\n * @name center\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [properties] an Object that is used as the {@link Feature}'s properties\n * @returns {Feature<Point>} a Point feature at the absolute center point of all input features\n * @example\n * var features = turf.featureCollection([\n *   turf.point( [-97.522259, 35.4691]),\n *   turf.point( [-97.502754, 35.463455]),\n *   turf.point( [-97.508269, 35.463245])\n * ]);\n *\n * var center = turf.center(features);\n *\n * //addToMap\n * var addToMap = [features, center]\n * center.properties['marker-size'] = 'large';\n * center.properties['marker-color'] = '#000';\n */\nmodule.exports = function (geojson, properties) {\n    var ext = bbox(geojson);\n    var x = (ext[0] + ext[2]) / 2;\n    var y = (ext[1] + ext[3]) / 2;\n    return point([x, y], properties);\n};\n","import L from 'leaflet';\nimport '@webk1d/leaflet-curve';\nimport turf from '@turf/helpers';\nimport turfCenter from '@turf/center';\n\nlet id = 0;\n\nL.SwoopyArrow = L.Layer.extend({\n  fromLatlng: [],\n  toLatlng: [],\n  options: {\n    color: '#222222',\n    weight: 1,\n    opacity: 1,\n    factor: 0.5,\n    arrowFilled: false,\n    arrowId: null,\n    minZoom: 0,\n    maxZoom: 22,\n    label: '',\n    labelClassName: '',\n    labelFontSize: 12,\n    labelColor: '#222222',\n    html: '',\n    iconAnchor: [0, 0],\n    iconSize: [50, 20],\n  },\n\n  initialize: function (fromLatlng, toLatlng, options) {\n    L.Util.setOptions(this, options);\n\n    this._currentPathVisible = true;\n    this._fromLatlng = L.latLng(fromLatlng);\n    this._toLatlng = L.latLng(toLatlng);\n    this._factor = this.options.factor;\n    this._label = this.options.label;\n    this._labelFontSize = this.options.labelFontSize;\n    this._labelColor = this.options.labelColor;\n    this._color = this.options.color;\n    this._labelClassName = this.options.labelClassName;\n    this._html = this.options.html;\n    this._opacity = this.options.opacity;\n    this._minZoom = this.options.minZoom;\n    this._maxZoom = this.options.maxZoom;\n    this._iconAnchor = this.options.iconAnchor;\n    this._iconSize = this.options.iconSize;\n    this._weight = this.options.weight;\n    this._arrowFilled = this.options.arrowFilled;\n    this._arrowId = this.options.arrowId;\n\n    this._initSVG();\n  },\n\n  _initSVG: function () {\n    this._svg = L.SVG.create('svg');\n    this._currentId = id++;\n    this._arrow = this._createArrow();\n    this._svg.appendChild(this._arrow);\n  },\n\n  onAdd: function (map) {\n    this._map = map;\n    this.getPane().appendChild(this._svg);\n\n    this._drawSwoopyArrows();\n\n    this.update(this._map);\n  },\n\n  getEvents: function () {\n    return {\n      zoom: this.update,\n      viewreset: this.update\n    };\n  },\n\n  _drawSwoopyArrows: function() {\n    const swoopyPath = this._createPath();\n    this._currentPath = swoopyPath._path;\n\n    const swoopyLabel = this._createLabel();\n    this._currentMarker = L.marker([this._fromLatlng.lat, this._fromLatlng.lng], { icon: swoopyLabel }).addTo(this._map);\n  },\n\n  _createArrow: function () {\n    this._container = this._container || L.SVG.create('defs');\n    const marker = L.SVG.create('marker');\n    const path = L.SVG.create('polyline');\n\n    marker.classList.add('swoopyArrow__marker');\n    marker.setAttribute('id', `swoopyarrow__arrowhead${this._currentId}`);\n    marker.setAttribute('markerWidth', '6.75');\n    marker.setAttribute('markerHeight', '6.75');\n    marker.setAttribute('viewBox', '-10 -10 20 20');\n    marker.setAttribute('orient', 'auto');\n    marker.setAttribute('refX', '0');\n    marker.setAttribute('refY', '0');\n    marker.setAttribute('fill', 'none');\n    marker.setAttribute('stroke', this._color);\n    marker.setAttribute('stroke-width', this._weight);\n    marker.setAttribute('opacity', this._opacity);\n\n    path.setAttribute('stroke-linejoin', 'bevel');\n    path.setAttribute('fill', this._arrowFilled ? this._color : 'none');\n    path.setAttribute('stroke', this._color);\n    path.setAttribute('points', '-6.75,-6.75 0,0 -6.75,6.75');\n    marker.appendChild(path);\n\n    this._container.appendChild(marker);\n\n    return this._container;\n  },\n\n  _createPath: function () {\n    const controlLatlng = this._getControlPoint(L.latLng(this._fromLatlng), L.latLng(this._toLatlng), this.options.factor);\n    const pathOne = L.curve([\n      'M', [this._fromLatlng.lat, this._fromLatlng.lng],\n      'Q', [controlLatlng.lat, controlLatlng.lng], [this._toLatlng.lat, this._toLatlng.lng]\n      ], {\n        animate: false,\n        color: this._color,\n        fill: false,\n        opacity: this._opacity,\n        weight: this._weight,\n        className: 'swoopyarrow__path'\n      }\n    ).addTo(this._map);\n\n\n    pathOne._path.setAttribute('id', `swoopyarrow__path${this._currentId}`);\n    pathOne._path.setAttribute('marker-end', !this._arrowId ?\n      `url(#swoopyarrow__arrowhead${this._currentId})` :\n      `url(${this._arrowId})`\n     );\n\n    return pathOne;\n  },\n\n\n  _rotatePoint: function (origin, point, angle) {\n    const radians = angle * Math.PI / 180.0;\n\n    return {\n      x: Math.cos(radians) * (point.x - origin.x) - Math.sin(radians) * (point.y - origin.y) + origin.x,\n      y: Math.sin(radians) * (point.x - origin.x) + Math.cos(radians) * (point.y - origin.y) + origin.y\n    };\n  },\n\n  _getControlPoint: function (start, end, factor) {\n    const features = turf.featureCollection([\n      turf.point([start.lat, start.lng]),\n      turf.point([end.lat, end.lng])\n    ]);\n\n    const center = turfCenter(features);\n\n    // get pixel coordinates for start, end and center\n    const startPx = this._map.latLngToContainerPoint(start);\n    const centerPx = this._map.latLngToContainerPoint(L.latLng(center.geometry.coordinates[0], center.geometry.coordinates[1]));\n    const rotatedPx = this._rotatePoint(centerPx, startPx, 90);\n\n    const distance = Math.sqrt(Math.pow(startPx.x - centerPx.x, 2) + Math.pow(startPx.y - centerPx.y, 2));\n    const angle = Math.atan2(rotatedPx.y - centerPx.y, rotatedPx.x - centerPx.x);\n    const offset = (factor * distance) - distance;\n\n    const sin = Math.sin(angle) * offset;\n    const cos = Math.cos(angle) * offset;\n\n    const controlPoint = L.point(rotatedPx.x + cos, rotatedPx.y + sin);\n\n    return this._map.containerPointToLatLng(controlPoint);\n  },\n\n  _createLabel: function() {\n    return L.divIcon({\n      className: this._html === '' && this._labelClassName,\n      html: this._html === ''  ? `<span id=\"marker-label${this._currentId}\" style=\"font-size: ${this._labelFontSize}px; color: ${this._labelColor}\">${this._label}</span>` : this._html,\n      iconAnchor: this._iconAnchor,\n      iconSize: this._iconSize\n    });\n  },\n\n  update: function(map) {\n    this._checkZoomLevel();\n\n    const arrowHead = this._svg.getElementById(`swoopyarrow__arrowhead${this._currentId}`);\n    arrowHead.setAttribute('markerWidth', `${2.5 * this._map.getZoom()}`);\n    arrowHead.setAttribute('markerHeight', `${2.5 * this._map.getZoom()}`);\n\n    return this;\n  },\n\n  _checkZoomLevel: function() {\n    const currentZoomLevel = this._map.getZoom();\n\n    if(!this._currentPathVisible) {\n      this._currentPath.setAttribute('opacity', this._opacity);\n      this._currentMarker.setOpacity(this._opacity);\n    }\n\n    if(currentZoomLevel < this._minZoom || currentZoomLevel > this._maxZoom) {\n      this._currentPath.setAttribute('opacity', 0);\n      this._currentMarker.setOpacity(0);\n\n      this._currentPathVisible = false;\n    }\n  },\n\n  onRemove: function(map) {\n    this._map = map;\n    this._currentPath.remove();\n    this._map.removeLayer(this._currentMarker);\n  }\n});\n\nL.swoopyArrow = (fromLatlng, toLatlng, options) => new L.SwoopyArrow(fromLatlng, toLatlng, options);\n"],"names":["path","options","bound","lastPoint","lastCommand","coord","i","controlPoint1","controlPoint2","endPoint","diffLat","diffLng","controlPoint","lastCoord","curCommand","curPoint","layer","length","points","point","str","feature","geometry","properties","bbox","id","feat","type","coordinates","geom","lineString","polygon","multiPoint","multiLineString","multiPolygon","ring","j","featureCollection","features","fc","geometryCollection","geometries","factors","areaFactors","round","num","precision","multiplier","radiansToDistance","radians","units","factor","distanceToRadians","distance","distanceToDegrees","radians2degrees","bearingToAngle","bearing","angle","degrees","degrees2radians","convertDistance","originalUnit","finalUnit","convertedDistance","convertArea","area","startFactor","finalFactor","coordEach","geojson","callback","excludeWrapCoord","featureIndex","geometryIndex","k","l","stopG","coords","geometryMaybeCollection","wrapShrink","coordIndex","isGeometryCollection","isFeatureCollection","isFeature","stop","featureSubIndex","geomType","coordReduce","initialValue","previousValue","currentCoord","propEach","propReduce","currentProperties","featureEach","featureReduce","currentFeature","coordAll","geomEach","g","geometryProperties","geomReduce","currentGeometry","currentIndex","flattenEach","coordinate","flattenReduce","segmentEach","previousCoords","currentSegment","segmentReduce","currentSubIndex","require$$0","ext","x","y","L","SwoopyArrow","Layer","extend","fromLatlng","toLatlng","Util","setOptions","_currentPathVisible","_fromLatlng","latLng","_toLatlng","_factor","_label","label","_labelFontSize","labelFontSize","_labelColor","labelColor","_color","color","_labelClassName","labelClassName","_html","html","_opacity","opacity","_minZoom","minZoom","_maxZoom","maxZoom","_iconAnchor","iconAnchor","_iconSize","iconSize","_weight","weight","_arrowFilled","arrowFilled","_arrowId","arrowId","_initSVG","_svg","SVG","create","_currentId","_arrow","_createArrow","appendChild","map","_map","getPane","_drawSwoopyArrows","update","swoopyPath","_createPath","_currentPath","_path","swoopyLabel","_createLabel","_currentMarker","marker","lat","lng","icon","addTo","_container","classList","add","setAttribute","controlLatlng","_getControlPoint","pathOne","curve","origin","Math","PI","cos","sin","start","end","turf","center","turfCenter","startPx","latLngToContainerPoint","centerPx","rotatedPx","_rotatePoint","sqrt","pow","atan2","offset","containerPointToLatLng","divIcon","_checkZoomLevel","arrowHead","getElementById","getZoom","currentZoomLevel","setOpacity","remove","removeLayer","swoopyArrow"],"mappings":"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"}