{"version":3,"file":"Leaflet.SwoopyArrow.js","sources":["../node_modules/@webk1d/leaflet-curve/leaflet.curve.js","../node_modules/@turf/helpers/index.js","../node_modules/@turf/meta/index.js","../node_modules/@turf/bbox/index.js","../node_modules/@turf/center/index.js","../src/index.js"],"sourcesContent":["/*\r\n * Leaflet.curve v0.1.0 - a plugin for Leaflet mapping library. https://github.com/elfalem/Leaflet.curve\r\n * (c) elfalem 2015\r\n */\r\n/*\r\n * note that SVG (x, y) corresponds to (long, lat)\r\n */\r\n\r\nL.Curve = L.Path.extend({\r\n\toptions: {\r\n\t},\r\n\t\r\n\tinitialize: function(path, options){\r\n\t\tL.setOptions(this, options);\r\n\t\tthis._initialUpdate = true;\r\n\t\tthis._setPath(path);\r\n\t},\r\n\t\r\n\tgetPath: function(){\r\n\t\treturn this._coords;\r\n\t},\r\n\t\r\n\tsetPath: function(path){\r\n\t\tthis._setPath(path);\r\n\t\treturn this.redraw();\r\n\t},\r\n\t\r\n\tgetBounds: function() {\r\n\t\treturn this._bounds;\r\n\t},\r\n\r\n\t_setPath: function(path){\r\n\t\tthis._coords = path;\r\n\t\tthis._bounds = this._computeBounds();\r\n\t},\r\n\t\r\n\t_computeBounds: function(){\r\n\t\tvar bound = new L.LatLngBounds();\r\n\t\tvar lastPoint;\r\n\t\tvar lastCommand;\r\n\t\tvar coord;\r\n\t\tfor(var i = 0; i < this._coords.length; i++){\r\n\t\t\tcoord = this._coords[i];\r\n\t\t\tif(typeof coord == 'string' || coord instanceof String){\r\n\t\t\t\tlastCommand = coord;\r\n\t\t\t}else if(lastCommand == 'H'){\r\n\t\t\t\tbound.extend([lastPoint.lat,coord[0]]);\r\n\t\t\t\tlastPoint = new L.latLng(lastPoint.lat,coord[0]);\r\n\t\t\t}else if(lastCommand == 'V'){\r\n\t\t\t\tbound.extend([coord[0], lastPoint.lng]);\r\n\t\t\t\tlastPoint = new L.latLng(coord[0], lastPoint.lng);\r\n\t\t\t}else if(lastCommand == 'C'){\r\n\t\t\t\tvar controlPoint1 = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar controlPoint2 = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tbound.extend(controlPoint1);\r\n\t\t\t\tbound.extend(controlPoint2);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint1 = controlPoint1;\r\n\t\t\t\tendPoint.controlPoint2 = controlPoint2;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else if(lastCommand == 'S'){\r\n\t\t\t\tvar controlPoint2 = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tvar controlPoint1 = lastPoint;\r\n\t\t\t\tif(lastPoint.controlPoint2){\r\n\t\t\t\t\tvar diffLat = lastPoint.lat - lastPoint.controlPoint2.lat;\r\n\t\t\t\t\tvar diffLng = lastPoint.lng - lastPoint.controlPoint2.lng;\r\n\t\t\t\t\tcontrolPoint1 = new L.latLng(lastPoint.lat + diffLat, lastPoint.lng + diffLng);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbound.extend(controlPoint1);\r\n\t\t\t\tbound.extend(controlPoint2);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint1 = controlPoint1;\r\n\t\t\t\tendPoint.controlPoint2 = controlPoint2;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else if(lastCommand == 'Q'){\r\n\t\t\t\tvar controlPoint = new L.latLng(coord[0], coord[1]);\r\n\t\t\t\tcoord = this._coords[++i];\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tbound.extend(controlPoint);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint = controlPoint;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else if(lastCommand == 'T'){\r\n\t\t\t\tvar endPoint = new L.latLng(coord[0], coord[1]);\r\n\r\n\t\t\t\tvar controlPoint = lastPoint;\r\n\t\t\t\tif(lastPoint.controlPoint){\r\n\t\t\t\t\tvar diffLat = lastPoint.lat - lastPoint.controlPoint.lat;\r\n\t\t\t\t\tvar diffLng = lastPoint.lng - lastPoint.controlPoint.lng;\r\n\t\t\t\t\tcontrolPoint = new L.latLng(lastPoint.lat + diffLat, lastPoint.lng + diffLng);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbound.extend(controlPoint);\r\n\t\t\t\tbound.extend(endPoint);\r\n\r\n\t\t\t\tendPoint.controlPoint = controlPoint;\r\n\t\t\t\tlastPoint = endPoint;\r\n\t\t\t}else{\r\n\t\t\t\tbound.extend(coord);\r\n\t\t\t\tlastPoint = new L.latLng(coord[0], coord[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bound;\r\n\t},\r\n\t\r\n\t//TODO: use a centroid algorithm instead\r\n\tgetCenter: function () {\r\n\t\treturn this._bounds.getCenter();\r\n\t},\r\n\t\r\n\t_update: function(){\r\n\t\tif (!this._map) { return; }\r\n\t\t\r\n\t\tthis._updatePath();\r\n\t},\r\n\t\r\n\t_updatePath: function() {\r\n\t\tthis._renderer._updatecurve(this);\r\n\t},\r\n\r\n\t_project: function() {\r\n\t\tvar coord, lastCoord, curCommand, curPoint;\r\n\r\n\t\tthis._points = [];\r\n\t\t\r\n\t\tfor(var i = 0; i < this._coords.length; i++){\r\n\t\t\tcoord = this._coords[i];\r\n\t\t\tif(typeof coord == 'string' || coord instanceof String){\r\n\t\t\t\tthis._points.push(coord);\r\n\t\t\t\tcurCommand = coord;\r\n\t\t\t}else {\r\n\t\t\t\tswitch(coord.length){\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tcurPoint = this._map.latLngToLayerPoint(coord);\r\n\t\t\t\t\t\tlastCoord = coord;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tif(curCommand == 'H'){\r\n\t\t\t\t\t\t\tcurPoint = this._map.latLngToLayerPoint([lastCoord[0], coord[0]]);\r\n\t\t\t\t\t\t\tlastCoord = [lastCoord[0], coord[0]];\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tcurPoint = this._map.latLngToLayerPoint([coord[0], lastCoord[1]]);\r\n\t\t\t\t\t\t\tlastCoord = [coord[0], lastCoord[1]];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis._points.push(curPoint);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n});\r\n\r\nL.curve = function (path, options){\r\n\treturn new L.Curve(path, options);\r\n};\r\n\r\nL.SVG.include({\r\n\t_updatecurve: function(layer){\r\n\t\tthis._setPath(layer, this._curvePointsToPath(layer._points));\r\n\r\n\t\tif(layer.options.animate){\r\n\t\t\tvar path = layer._path;\r\n\t\t\tvar length = path.getTotalLength();\r\n\t\t\t\r\n\t\t\tif(!layer.options.dashArray){\r\n\t\t\t\tpath.style.strokeDasharray = length + ' ' + length;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(layer._initialUpdate){\r\n\t\t\t\tpath.animate([\r\n\t\t\t\t\t\t{strokeDashoffset: length},\r\n\t\t\t\t\t\t{strokeDashoffset: 0}\r\n\t\t\t\t\t], layer.options.animate);\r\n\t\t\t\tlayer._initialUpdate = false;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t\r\n \t_curvePointsToPath: function(points){\r\n\t\tvar point, curCommand, str = '';\r\n\t\tfor(var i = 0; i < points.length; i++){\r\n\t\t\tpoint = points[i];\r\n\t\t\tif(typeof point == 'string' || point instanceof String){\r\n\t\t\t\tcurCommand = point;\r\n\t\t\t\tstr += curCommand;\r\n\t\t\t}else{\r\n\t\t\t\tswitch(curCommand){\r\n\t\t\t\t\tcase 'H':\r\n\t\t\t\t\t\tstr += point.x + ' ';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'V':\r\n\t\t\t\t\t\tstr += point.y + ' ';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr += point.x + ',' + point.y + ' ';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str || 'M0 0';\r\n\t}\r\n});\r\n","/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties, bbox, id) {\n    if (geometry === undefined) throw new Error('geometry is required');\n    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n\n    var feat = {\n        type: 'Feature',\n        properties: properties || {},\n        geometry: geometry\n    };\n    if (bbox) {\n        if (bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n        feat.bbox = bbox;\n    }\n    if (id) feat.id = id;\n    return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<number>} coordinates Coordinates\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = 'Point';\n * var coordinates = [110, 50];\n *\n * var geometry = turf.geometry(type, coordinates);\n *\n * //=geometry\n */\nfunction geometry(type, coordinates, bbox) {\n    // Validation\n    if (!type) throw new Error('type is required');\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    var geom;\n    switch (type) {\n    case 'Point': geom = point(coordinates).geometry; break;\n    case 'LineString': geom = lineString(coordinates).geometry; break;\n    case 'Polygon': geom = polygon(coordinates).geometry; break;\n    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;\n    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;\n    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;\n    default: throw new Error(type + ' is invalid');\n    }\n    if (bbox) {\n        if (bbox.length !== 4) throw new Error('bbox must be an Array of 4 numbers');\n        geom.bbox = bbox;\n    }\n    return geom;\n}\n\n/**\n * Takes coordinates and properties (optional) and returns a new {@link Point} feature.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n    if (coordinates.length === undefined) throw new Error('Coordinates must be an array');\n    if (coordinates.length < 2) throw new Error('Coordinates must be at least 2 numbers long');\n    if (typeof coordinates[0] !== 'number' || typeof coordinates[1] !== 'number') throw new Error('Coordinates must contain numbers');\n\n    return feature({\n        type: 'Point',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Takes an array of LinearRings and optionally an {@link Object} with properties and returns a {@link Polygon} feature.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<Polygon>} a Polygon feature\n * @throws {Error} throw an error if a LinearRing of the polygon has too few positions\n * or if a LinearRing of the Polygon does not have matching Positions at the beginning & end.\n * @example\n * var polygon = turf.polygon([[\n *   [-2.275543, 53.464547],\n *   [-2.275543, 53.489271],\n *   [-2.215118, 53.489271],\n *   [-2.215118, 53.464547],\n *   [-2.275543, 53.464547]\n * ]], { name: 'poly1', population: 400});\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    for (var i = 0; i < coordinates.length; i++) {\n        var ring = coordinates[i];\n        if (ring.length < 4) {\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error('First and last Position are not equivalent.');\n            }\n        }\n    }\n\n    return feature({\n        type: 'Polygon',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link LineString} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<LineString>} a LineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var linestring1 = turf.lineString([\n *   [-21.964416, 64.148203],\n *   [-21.956176, 64.141316],\n *   [-21.93901, 64.135924],\n *   [-21.927337, 64.136673]\n * ]);\n * var linestring2 = turf.lineString([\n *   [-21.929054, 64.127985],\n *   [-21.912918, 64.134726],\n *   [-21.916007, 64.141016],\n *   [-21.930084, 64.14446]\n * ], {name: 'line 1', distance: 145});\n *\n * //=linestring1\n *\n * //=linestring2\n */\nfunction lineString(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n    if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');\n\n    return feature({\n        type: 'LineString',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @returns {FeatureCollection} a FeatureCollection of input features\n * @example\n * var features = [\n *  turf.point([-75.343, 39.984], {name: 'Location A'}),\n *  turf.point([-75.833, 39.284], {name: 'Location B'}),\n *  turf.point([-75.534, 39.123], {name: 'Location C'})\n * ];\n *\n * var collection = turf.featureCollection(features);\n *\n * //=collection\n */\nfunction featureCollection(features, bbox) {\n    if (!features) throw new Error('No features passed');\n    if (!Array.isArray(features)) throw new Error('features must be an Array');\n\n    var fc = {\n        type: 'FeatureCollection',\n        features: features\n    };\n    if (bbox) fc.bbox = bbox;\n    return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    return feature({\n        type: 'MultiLineString',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    return feature({\n        type: 'MultiPoint',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, bbox, id) {\n    if (!coordinates) throw new Error('No coordinates passed');\n\n    return feature({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n    }, properties, bbox, id);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Array<number>} [bbox] BBox [west, south, east, north]\n * @param {string|number} [id] Identifier\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometryCollection([pt, line]);\n *\n * //=collection\n */\nfunction geometryCollection(geometries, properties, bbox, id) {\n    if (!geometries) throw new Error('geometries is required');\n    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n\n    return feature({\n        type: 'GeometryCollection',\n        geometries: geometries\n    }, properties, bbox, id);\n}\n\n// https://en.wikipedia.org/wiki/Great-circle_distance#Radius_for_spherical_Earth\nvar factors = {\n    miles: 3960,\n    nauticalmiles: 3441.145,\n    degrees: 57.2957795,\n    radians: 1,\n    inches: 250905600,\n    yards: 6969600,\n    meters: 6373000,\n    metres: 6373000,\n    centimeters: 6.373e+8,\n    centimetres: 6.373e+8,\n    kilometers: 6373,\n    kilometres: 6373,\n    feet: 20908792.65\n};\n\nvar areaFactors = {\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    centimetres: 10000,\n    millimeter: 1000000,\n    acres: 0.000247105,\n    miles: 3.86e-7,\n    yards: 1.195990046,\n    feet: 10.763910417,\n    inches: 1550.003100006\n};\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToDistance\n * @param {number} radians in radians across the sphere\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToDistance(radians, units) {\n    if (radians === undefined || radians === null) throw new Error('radians is required');\n\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error('units is invalid');\n    return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name distanceToRadians\n * @param {number} distance in real units\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction distanceToRadians(distance, units) {\n    if (distance === undefined || distance === null) throw new Error('distance is required');\n\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error('units is invalid');\n    return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name distanceToDegrees\n * @param {number} distance in real units\n * @param {string} [units=kilometers] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction distanceToDegrees(distance, units) {\n    return radians2degrees(distanceToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAngle\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAngle(bearing) {\n    if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n\n    var angle = bearing % 360;\n    if (angle < 0) angle += 360;\n    return angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radians2degrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radians2degrees(radians) {\n    if (radians === null || radians === undefined) throw new Error('radians is required');\n\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degrees2radians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degrees2radians(degrees) {\n    if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\n\n\n/**\n * Converts a distance to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} distance to be converted\n * @param {string} originalUnit of the distance\n * @param {string} [finalUnit=kilometers] returned unit\n * @returns {number} the converted distance\n */\nfunction convertDistance(distance, originalUnit, finalUnit) {\n    if (distance === null || distance === undefined) throw new Error('distance is required');\n    if (!(distance >= 0)) throw new Error('distance must be a positive number');\n\n    var convertedDistance = radiansToDistance(distanceToRadians(distance, originalUnit), finalUnit || 'kilometers');\n    return convertedDistance;\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeter, acre, mile, yard, foot, inch\n * @param {number} area to be converted\n * @param {string} [originalUnit=meters] of the distance\n * @param {string} [finalUnit=kilometers] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (area === null || area === undefined) throw new Error('area is required');\n    if (!(area >= 0)) throw new Error('area must be a positive number');\n\n    var startFactor = areaFactors[originalUnit || 'meters'];\n    if (!startFactor) throw new Error('invalid original units');\n\n    var finalFactor = areaFactors[finalUnit || 'kilometers'];\n    if (!finalFactor) throw new Error('invalid final units');\n\n    return (area / startFactor) * finalFactor;\n}\n\nmodule.exports = {\n    feature: feature,\n    geometry: geometry,\n    featureCollection: featureCollection,\n    geometryCollection: geometryCollection,\n    point: point,\n    multiPoint: multiPoint,\n    lineString: lineString,\n    multiLineString: multiLineString,\n    polygon: polygon,\n    multiPolygon: multiPolygon,\n    radiansToDistance: radiansToDistance,\n    distanceToRadians: distanceToRadians,\n    distanceToDegrees: distanceToDegrees,\n    radians2degrees: radians2degrees,\n    degrees2radians: degrees2radians,\n    bearingToAngle: bearingToAngle,\n    convertDistance: convertDistance,\n    convertArea: convertArea,\n    round: round\n};\n","/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0.\n * @param {number} featureIndex The current index of the feature being processed.\n * @param {number} featureSubIndex The current subIndex of the feature being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, featureSubIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=featureSubIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var featureIndex, geometryIndex, j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (featureIndex = 0; featureIndex < stop; featureIndex++) {\n        var featureSubIndex = 0;\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n        (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (geometryIndex = 0; geometryIndex < stopG; geometryIndex++) {\n            geometry = isGeometryCollection ?\n            geometryMaybeCollection.geometries[geometryIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                callback(coords, coordIndex, featureIndex, featureSubIndex);\n                coordIndex++;\n                featureSubIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    callback(coords[j], coordIndex, featureIndex, featureSubIndex);\n                    coordIndex++;\n                    featureSubIndex++;\n                }\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++)\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        callback(coords[j][k], coordIndex, featureIndex, featureSubIndex);\n                        coordIndex++;\n                        featureSubIndex++;\n                    }\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++)\n                    for (k = 0; k < coords[j].length; k++)\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            callback(coords[j][k][l], coordIndex, featureIndex, featureSubIndex);\n                            coordIndex++;\n                            featureSubIndex++;\n                        }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    coordEach(geometry.geometries[j], callback, excludeWrapCoord);\n                break;\n            default: throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the feature being processed.\n * @param {number} featureSubIndex The current subIndex of the feature being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=featureSubIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, featureSubIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, featureSubIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current properties being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            callback(geojson.features[i].properties, i);\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current properties being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current feature being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            callback(geojson.features[i], i);\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current geometry being processed.\n * @param {number} currentIndex The index of the current element being processed in the\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} currentProperties The current feature properties being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, currentProperties)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, currentProperties) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=currentProperties\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        geometryProperties,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n        (isFeature ? geojson.geometry : geojson));\n        geometryProperties = (isFeatureCollection ? geojson.features[i].properties :\n                              (isFeature ? geojson.properties : {}));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n            geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                callback(null, featureIndex, geometryProperties);\n                featureIndex++;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                callback(geometry, featureIndex, geometryProperties);\n                featureIndex++;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    callback(geometry.geometries[j], featureIndex, geometryProperties);\n                    featureIndex++;\n                }\n                break;\n            }\n            default: throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Feature being processed.\n * @param {number} currentIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {Object} currentProperties The current feature properties being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, currentProperties)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, currentProperties) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=currentProperties\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, currentIndex, currentProperties) {\n        if (currentIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, currentIndex, currentProperties);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureSubIndex The subindex of the current element being processed in the\n * array. Starts at index 0 and increases if the flattened feature was a multi-geometry.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, featureSubIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, featureSubIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=featureSubIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            callback(feature(geometry, properties), featureIndex, 0);\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        geometry.coordinates.forEach(function (coordinate, featureSubIndex) {\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            callback(feature(geom, properties), featureIndex, featureSubIndex);\n        });\n\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The index of the current element being processed in the\n * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureSubIndex The subindex of the current element being processed in the\n * array. Starts at index 0 and increases if the flattened feature was a multi-geometry.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {Geometry|FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, featureSubIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, featureSubIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=featureSubIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, featureSubIndex) {\n        if (featureIndex === 0 && featureSubIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, featureSubIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current segment being processed.\n * @param {number} featureIndex The index of the current element being processed in the array, starts at index 0.\n * @param {number} featureSubIndex The subindex of the current element being processed in the\n * array. Starts at index 0 and increases for each iterating line segment.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, featureSubIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, featureSubIndex) {\n *   //= currentSegment\n *   //= featureIndex\n *   //= featureSubIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * var initialValue = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * }, initialValue);\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature, featureIndex) {\n        var featureSubIndex = 0;\n        // Exclude null Geometries\n        if (!feature.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        coordReduce(feature, function (previousCoords, currentCoord) {\n            var currentSegment = lineString([previousCoords, currentCoord], feature.properties);\n            callback(currentSegment, featureIndex, featureSubIndex);\n            featureSubIndex++;\n            return currentCoord;\n        });\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} [previousValue] The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} [currentSegment] The current segment being processed.\n * @param {number} [currentIndex] The index of the current element being processed in the\n * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} [currentSubIndex] The subindex of the current element being processed in the\n * array. Starts at index 0 and increases for each iterating line segment.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, currentIndex, currentSubIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= currentIndex\n *   //= currentSubIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    segmentEach(geojson, function (currentSegment, currentIndex, currentSubIndex) {\n        if (currentIndex === 0 && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, currentIndex, currentSubIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Create Feature\n *\n * @private\n * @param {Geometry} geometry GeoJSON Geometry\n * @param {Object} properties Properties\n * @returns {Feature} GeoJSON Feature\n */\nfunction feature(geometry, properties) {\n    if (geometry === undefined) throw new Error('No geometry passed');\n\n    return {\n        type: 'Feature',\n        properties: properties || {},\n        geometry: geometry\n    };\n}\n\n/**\n * Create LineString\n *\n * @private\n * @param {Array<Array<number>>} coordinates Line Coordinates\n * @param {Object} properties Properties\n * @returns {Feature<LineString>} GeoJSON LineString Feature\n */\nfunction lineString(coordinates, properties) {\n    if (!coordinates) throw new Error('No coordinates passed');\n    if (coordinates.length < 2) throw new Error('Coordinates must be an array of two or more positions');\n\n    return {\n        type: 'Feature',\n        properties: properties || {},\n        geometry: {\n            type: 'LineString',\n            coordinates: coordinates\n        }\n    };\n}\n\nmodule.exports = {\n    coordEach: coordEach,\n    coordReduce: coordReduce,\n    propEach: propEach,\n    propReduce: propReduce,\n    featureEach: featureEach,\n    featureReduce: featureReduce,\n    coordAll: coordAll,\n    geomEach: geomEach,\n    geomReduce: geomReduce,\n    flattenEach: flattenEach,\n    flattenReduce: flattenReduce,\n    segmentEach: segmentEach,\n    segmentReduce: segmentReduce\n};\n","var coordEach = require('@turf/meta').coordEach;\n\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {FeatureCollection|Feature<any>} geojson input features\n * @returns {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nmodule.exports = function (geojson) {\n    var bbox = [Infinity, Infinity, -Infinity, -Infinity];\n    coordEach(geojson, function (coord) {\n        if (bbox[0] > coord[0]) bbox[0] = coord[0];\n        if (bbox[1] > coord[1]) bbox[1] = coord[1];\n        if (bbox[2] < coord[0]) bbox[2] = coord[0];\n        if (bbox[3] < coord[1]) bbox[3] = coord[1];\n    });\n    return bbox;\n};\n","var bbox = require('@turf/bbox');\nvar point = require('@turf/helpers').point;\n\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the absolute center point of all features.\n *\n * @name center\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [properties] an Object that is used as the {@link Feature}'s properties\n * @returns {Feature<Point>} a Point feature at the absolute center point of all input features\n * @example\n * var features = turf.featureCollection([\n *   turf.point( [-97.522259, 35.4691]),\n *   turf.point( [-97.502754, 35.463455]),\n *   turf.point( [-97.508269, 35.463245])\n * ]);\n *\n * var center = turf.center(features);\n *\n * //addToMap\n * var addToMap = [features, center]\n * center.properties['marker-size'] = 'large';\n * center.properties['marker-color'] = '#000';\n */\nmodule.exports = function (geojson, properties) {\n    var ext = bbox(geojson);\n    var x = (ext[0] + ext[2]) / 2;\n    var y = (ext[1] + ext[3]) / 2;\n    return point([x, y], properties);\n};\n","import L from 'leaflet';\nimport '@webk1d/leaflet-curve';\nimport turf from '@turf/helpers';\nimport turfCenter from '@turf/center';\n\nlet id = 0;\n\nL.SwoopyArrow = L.Layer.extend({\n  fromLatlng: [],\n  toLatlng: [],\n  options: {\n    color: '#222',\n    weight: 1,\n    opacity: 1,\n    factor: 0.5,\n    arrowFilled: false,\n    minZoom: 0,\n    maxZoom: 22,\n    text: '',\n    fontSize: 12,\n    fontColor: '#222',\n    textClassName: '',\n    iconAnchor: [0, 0],\n    iconSize: [50, 20],\n  },\n\n  initialize: function (fromLatlng, toLatlng, options) {\n    L.Util.setOptions(this, options);\n\n    this._currentPathVisible = true;\n    this._fromLatlng = L.latLng(fromLatlng);\n    this._toLatlng = L.latLng(toLatlng);\n    this._factor = this.options.factor;\n    this._text = this.options.text;\n    this._fontSize = this.options.fontSize;\n    this._color = this.options.color;\n    this._textClassName = this.options.textClassName;\n    this._opacity = this.options.opacity;\n    this._minZoom = this.options.minZoom;\n    this._maxZoom = this.options.maxZoom;\n    this._iconAnchor = this.options.iconAnchor;\n    this._iconSize = this.options.iconSize;\n    this._weight = this.options.weight;\n    this._arrowFilled = this.options.arrowFilled;\n\n    this._initSVG();\n  },\n\n  _initSVG: function () {\n    this._svg = L.SVG.create('svg');\n    this._currentId = id++;\n    this._arrow = this._createArrow();\n    this._svg.appendChild(this._arrow);\n  },\n\n  onAdd: function (map) {\n    this._map = map;\n    this.getPane().appendChild(this._svg);\n\n    this._drawSwoopyArrows();\n\n    this.update(this._map);\n  },\n\n  getEvents: function () {\n    return {\n      zoom: this.update,\n      viewreset: this.update\n    };\n  },\n\n  _drawSwoopyArrows: function() {\n    const swoopyPath = this._createPath();\n    this._currentPath = swoopyPath._path;\n\n    const swoopyLabel = this._createLabel();\n    this._currentMarker = L.marker([this._fromLatlng.lat, this._fromLatlng.lng], { icon: swoopyLabel }).addTo(this._map);\n  },\n\n  _createArrow: function () {\n    this._container = this._container || L.SVG.create('defs');\n    const marker = L.SVG.create('marker');\n    const path = L.SVG.create('polyline');\n\n    marker.classList.add('swoopyArrow__marker');\n    marker.setAttribute('id', `swoopyarrow__arrowhead${this._currentId}`);\n    marker.setAttribute('markerWidth', '20');\n    marker.setAttribute('markerHeight', '20');\n    marker.setAttribute('viewBox', '-10 -10 20 20');\n    marker.setAttribute('orient', 'auto');\n    marker.setAttribute('refX', '0');\n    marker.setAttribute('refY', '0');\n    marker.setAttribute('fill', 'none');\n    marker.setAttribute('stroke', this._color);\n    marker.setAttribute('stroke-width', this._weight);\n    marker.setAttribute('opacity', this._opacity);\n\n    path.setAttribute('stroke-linejoin', 'bevel');\n    path.setAttribute('fill', this._arrowFilled ? this._color : 'none');\n    path.setAttribute('stroke', this._color);\n    path.setAttribute('points', '-6.75,-6.75 0,0 -6.75,6.75');\n\n    marker.appendChild(path);\n    this._container.appendChild(marker);\n\n    return this._container;\n  },\n\n  _createPath: function () {\n    const controlLatlng = this._getControlPoint(L.latLng(this._fromLatlng), L.latLng(this._toLatlng), this.options.factor);\n    const pathOne = L.curve([\n      'M', [this._fromLatlng.lat, this._fromLatlng.lng],\n      'Q', [controlLatlng.lat, controlLatlng.lng], [this._toLatlng.lat, this._toLatlng.lng]\n      ], {\n        animate: false,\n        color: this._color,\n        fill: false,\n        opacity: this._opacity,\n        weight: this._weight,\n        className: 'swoopyarrow__path'\n      }\n    ).addTo(this._map);\n\n    pathOne._path.setAttribute('id', `swoopyarrow__path${this._currentId}`);\n    pathOne._path.setAttribute('marker-end', `url(#swoopyarrow__arrowhead${this._currentId})`);\n\n    return pathOne;\n  },\n\n\n  _rotatePoint: function (origin, point, angle) {\n    const radians = angle * Math.PI / 180.0;\n\n    return {\n      x: Math.cos(radians) * (point.x - origin.x) - Math.sin(radians) * (point.y - origin.y) + origin.x,\n      y: Math.sin(radians) * (point.x - origin.x) + Math.cos(radians) * (point.y - origin.y) + origin.y\n    };\n  },\n\n  _getControlPoint: function (start, end, factor) {\n    const features = turf.featureCollection([\n      turf.point([start.lat, start.lng]),\n      turf.point([end.lat, end.lng])\n    ]);\n\n    const center = turfCenter(features);\n\n    // get pixel coordinates for start, end and center\n    const startPx = this._map.latLngToContainerPoint(start);\n    const centerPx = this._map.latLngToContainerPoint(L.latLng(center.geometry.coordinates[0], center.geometry.coordinates[1]));\n    const rotatedPx = this._rotatePoint(centerPx, startPx, 90);\n\n    const distance = Math.sqrt(Math.pow(startPx.x - centerPx.x, 2) + Math.pow(startPx.y - centerPx.y, 2));\n    const angle = Math.atan2(rotatedPx.y - centerPx.y, rotatedPx.x - centerPx.x);\n    const offset = (factor * distance) - distance;\n\n    const sin = Math.sin(angle) * offset;\n    const cos = Math.cos(angle) * offset;\n\n    const controlPoint = L.point(rotatedPx.x + cos, rotatedPx.y + sin);\n\n    return this._map.containerPointToLatLng(controlPoint);\n  },\n\n  _createLabel: function() {\n    return L.divIcon({\n      className: this._textClassName,\n      html: `<span id=\"marker-label${this._currentId}\" style=\"font-size: ${this._fontSize}px\">${this._text}</span>`,\n      iconAnchor: this._iconAnchor,\n      iconSize: this._iconSize\n    });\n  },\n\n  update: function(map) {\n    this._checkZoomLevel();\n\n    const arrowHead = this._svg.getElementById(`swoopyarrow__arrowhead${this._currentId}`);\n    arrowHead.setAttribute('markerWidth', `${2.5 * this._map.getZoom()}`);\n    arrowHead.setAttribute('markerHeight', `${2.5 * this._map.getZoom()}`);\n\n    return this;\n  },\n\n  _checkZoomLevel: function() {\n    const currentZoomLevel = this._map.getZoom();\n\n    if(!this._currentPathVisible) {\n      this._currentPath.setAttribute('opacity', this._opacity);\n      this._currentMarker.setOpacity(this._opacity);\n    }\n\n    if(currentZoomLevel < this._minZoom || currentZoomLevel > this._maxZoom) {\n      this._currentPath.setAttribute('opacity', 0);\n      this._currentMarker.setOpacity(0);\n\n      this._currentPathVisible = false;\n    }\n  }\n});\n\nL.swoopyArrow = (fromLatlng, toLatlng, options) => new L.SwoopyArrow(fromLatlng, toLatlng, options);\n"],"names":["coordEach","feature","lineString","require$$0","point","id","L","SwoopyArrow","Layer","extend","fromLatlng","toLatlng","options","Util","setOptions","_currentPathVisible","_fromLatlng","latLng","_toLatlng","_factor","factor","_text","text","_fontSize","fontSize","_color","color","_textClassName","textClassName","_opacity","opacity","_minZoom","minZoom","_maxZoom","maxZoom","_iconAnchor","iconAnchor","_iconSize","iconSize","_weight","weight","_arrowFilled","arrowFilled","_initSVG","_svg","SVG","create","_currentId","_arrow","_createArrow","appendChild","map","_map","getPane","_drawSwoopyArrows","update","swoopyPath","_createPath","_currentPath","_path","swoopyLabel","_createLabel","_currentMarker","marker","lat","lng","icon","addTo","_container","path","classList","add","setAttribute","controlLatlng","_getControlPoint","pathOne","curve","origin","angle","radians","Math","PI","cos","x","sin","y","start","end","features","turf","featureCollection","center","turfCenter","startPx","latLngToContainerPoint","centerPx","geometry","coordinates","rotatedPx","_rotatePoint","distance","sqrt","pow","atan2","offset","controlPoint","containerPointToLatLng","divIcon","_checkZoomLevel","arrowHead","getElementById","getZoom","currentZoomLevel","setOpacity","swoopyArrow"],"mappings":"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"}